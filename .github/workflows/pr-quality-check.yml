name: PR Quality Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  quality-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run type check
        run: pnpm typecheck
        continue-on-error: true

      - name: Run linting
        run: pnpm lint
        continue-on-error: true

      - name: Run tests
        run: pnpm test
        continue-on-error: true

      - name: Analyze changes
        id: analyze
        run: |
          # Get changed files
          CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})

          # Determine change type based on file patterns
          if echo "$CHANGED_FILES" | grep -q "\.test\."; then
            echo "change_type=test" >> $GITHUB_OUTPUT
          elif echo "$CHANGED_FILES" | grep -q "\.md$"; then
            echo "change_type=docs" >> $GITHUB_OUTPUT
          elif echo "$CHANGED_FILES" | grep -q "\.css\|\.scss\|\.tsx"; then
            echo "change_type=ui" >> $GITHUB_OUTPUT
          else
            echo "change_type=feature" >> $GITHUB_OUTPUT
          fi

          # Check for common issues
          if echo "$CHANGED_FILES" | grep -q "console\.log"; then
            echo "has_console_log=true" >> $GITHUB_OUTPUT
          fi

          if echo "$CHANGED_FILES" | grep -q "TODO"; then
            echo "has_todo=true" >> $GITHUB_OUTPUT
          fi

      - name: Create PR comment
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // Read test results if they exist
            let testResults = '';
            let lintResults = '';
            let typeResults = '';

            try {
              if (fs.existsSync('test-results.txt')) {
                testResults = fs.readFileSync('test-results.txt', 'utf8');
              }
            } catch (e) {}

            const changeType = '${{ steps.analyze.outputs.change_type }}';
            const hasConsoleLog = '${{ steps.analyze.outputs.has_console_log }}' === 'true';
            const hasTodo = '${{ steps.analyze.outputs.has_todo }}' === 'true';

            let comment = `## ü§ñ Automated Quality Check

            **Change Type:** ${changeType}

            ### ‚úÖ Automated Checks
            - [x] Type checking: ${process.env.TYPE_CHECK_EXIT_CODE === '0' ? '‚úÖ Passed' : '‚ùå Failed'}
            - [x] Linting: ${process.env.LINT_EXIT_CODE === '0' ? '‚úÖ Passed' : '‚ùå Failed'}
            - [x] Tests: ${process.env.TEST_EXIT_CODE === '0' ? '‚úÖ Passed' : '‚ùå Failed'}

            ### ‚ö†Ô∏è Issues Found
            ${hasConsoleLog ? '- [ ] **Console.log detected** - Please remove before merging\n' : ''}
            ${hasTodo ? '- [ ] **TODO comments found** - Please address before merging\n' : ''}

            ### üìù Manual Checks Needed
            - [ ] Code review completed
            - [ ] Manual testing performed
            - [ ] Documentation updated (if needed)

            ---
            *This comment was automatically generated. Please update the checkboxes above.*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
